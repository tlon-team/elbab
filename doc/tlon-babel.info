This is tlon-babel.info, produced by makeinfo version 7.1 from
tlon-babel.texi.

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* Tlon Babel: (tlon-babel). Companion Emacs package for the Tlön Babel projects.
END-INFO-DIR-ENTRY


File: tlon-babel.info,  Node: Top,  Next: Main menu,  Up: (dir)

tlon-babel
**********

‘tlon-babel’ is a repository of Emacs functions for the Tlön ‘babel’
projects.

* Menu:

* Main menu::
* GitHub and org-mode synchronization::
* Editing Markdown::
* local variables::

-- The Detailed Node Listing --

Editing Markdown

* Commands to insert mathematical expressions::
* Commands to insert citations::
* Commands to insert note markers::
* Other commands::



File: tlon-babel.info,  Node: Main menu,  Next: GitHub and org-mode synchronization,  Prev: Top,  Up: Top

1 Main menu
***********


File: tlon-babel.info,  Node: GitHub and org-mode synchronization,  Next: Editing Markdown,  Prev: Main menu,  Up: Top

2 GitHub and org-mode synchronization
*************************************

‘tlon-babel’ includes several functions to synchronize the GitHub issues
on a given repository with the corresponding ‘org-mode’ TODOs in the
user’s local file.  The relevant GitHub sync functions are accessed from
‘tlon-babel-dispatch’ (‘H-r’), under the “sync” section (‘y’):

   • "visit or capture" (‘tlon-babel-visit-counterpart-or-capture’, ‘H-r
     y y’): visits the “counterpart” (the associated ‘org-mode’ TODO if
     point is on a GitHub issue, and vice versa) or, if point is on an
     issue that has not yet been captured, creates an associated
     ‘org-mode’ TODO.  This command can also be invoked directly by
     pressing ‘,’ with point on an issue or visiting an issue buffer.
     It may be regarded as a “dwim” (“do-what-I-mean”) command, in the
     sense that it is meant to guess the action that the user will
     normally want to perform in the relevant context.
   • "visit" (‘tlon-babel-visit-counterpart’, ‘H-r y v’): visits the
     “counterpart”.  If point is on an issue that has not yet been
     captured, no action will be taken.
   • "post" (‘tlon-babel-create-issue-from-todo’, ‘H-r y p’): posts the
     ‘org-mode’ TODO at point to GitHub, i.e.  creates an associated
     GitHub issue.
   • "capture" (‘tlon-babel-capture-issue’, ‘H-r y c’): captures the
     GitHub issue at point, i.e.  creates an associated ‘org-mode’ TODO.

   • "capture all" (‘tlon-babel-capture-all-issues’, ‘H-r y C’): like
     the above, but iterates over all GitHub issues in the repository.
   • "reconcile" (‘tlon-babel-reconcile-issue-and-todo’ , ‘H-r y r’):
     reconcile any differences between a GitHub issue and its associated
     ‘org-mode’ TODO.  If differences are found, the user will be
     prompted to indicate whether they want to keep the GitHub issue and
     modify the ‘org-mode’ TODO to match it (‘i’), or vice versa (‘t’).
     (Note: usually you want to keep the issue, so you will normally
     press ‘i’ when prompted).
   • "reconcile all" (‘tlon-babel-reconcile-all-issues-and-todos’, ‘H-r
     y R’): like the above, but iterates over all GitHub issues in the
     repository.  Note that issues not yet captured will be ignored, so
     you may want to capture all issues
     (‘tlon-babel-capture-all-issues’) before reconciling them, if your
     goal is to ensure that the your ‘org-mode’ TODOs are fully in sync
     with the GitHub issues.
   • "close" (‘tlon-babel-close-issue-and-todo’, ‘H-r y x’): close the
     GitHub issue and mark its associated ‘org-mode’ TODO as DONE.


File: tlon-babel.info,  Node: Editing Markdown,  Next: local variables,  Prev: GitHub and org-mode synchronization,  Up: Top

3 Editing Markdown
******************

This section describes the custom commands we use to edit Markdown
files.

   All the relevant commands can be called from ‘tlon-babel-md-menu’,
the Markdown menu, bound to ‘s-d’ (“d” as in “dispatcher”).

   [We extend the native Markdown markup language with various custom
MDX (https://mdxjs.com/) tags.]

   [Point out that the user should insert the relevant entities using
the Emacs commands whenever possible, to avoid human error.]

* Menu:

* Commands to insert mathematical expressions::
* Commands to insert citations::
* Commands to insert note markers::
* Other commands::


File: tlon-babel.info,  Node: Commands to insert mathematical expressions,  Next: Commands to insert citations,  Up: Editing Markdown

3.1 Commands to insert mathematical expressions
===============================================

Our websites support LaTeX-formatted math.  These expressions may be of
two types: _inline_ and _display_.  Inline expressions are embedded in a
paragraph, while display expressions occupy their own paragraph.

   Inline expressions are delimited by ‘$`’ and ‘`$’, like this:

     [T]he marginal chance of success is proportional to $`1/x`$, where $`x`$ is the total amount of resources that will be devoted to the problem before the point where we need a solution.

   Display expressions are in turn delimited by double dollar signs,
like this:

     $$
     \frac{v(S)}{v(L)}\ =\ \frac{p(S)}{p(L)}\ \times\ \frac{n(S)}{n(L)}\ \times\ \frac{r(L)}{r(S)}
     $$

   Note that the dollar sign delimiters occupy their own lines.

   Inline and display expressions can be inserted with
‘tlon-babel-md-insert-math-inline’ and with
‘tlon-babel-md-insert-math-display’, respectively.  If called in an
active region, the selected text will be enclosed by the appropriate
delimiters.  Otherwise, the delimiters will be inserted at point.


File: tlon-babel.info,  Node: Commands to insert citations,  Next: Commands to insert note markers,  Prev: Commands to insert mathematical expressions,  Up: Editing Markdown

3.2 Commands to insert citations
================================

To insert citations, we use the custom MDX tag ‘Cite’.  This
self-closing tag takes the mandatory attribute ‘bibKey’ and the optional
attribute ‘short’.  The value type of ‘bibKey’ is a single BibTeX key,
optionally followed by one or more locators
(https://docs.citationstyles.org/en/stable/specification.html#locators).
The attribute ‘short’ indicates that the citation is a “short” citation.


   (“Short” citations are defined as citations that only display the
title of the work, rather than its full bibliographic details.  Such
citations are appropriate in contexts in which the work is being
referred to explicitly rather than merely cited, as in this example:

     As Toby Ord writes in <Cite bibKey={"Ord2020PrecipiceExistentialRisk"} short />, humanity’s long-term potential may be lost this century.

   which is rendered as

     As Toby Ord writes in *The Precipice*, humanity’s long-term potential may be lost this century.


File: tlon-babel.info,  Node: Commands to insert note markers,  Next: Other commands,  Prev: Commands to insert citations,  Up: Editing Markdown

3.3 Commands to insert note markers
===================================


File: tlon-babel.info,  Node: Other commands,  Prev: Commands to insert note markers,  Up: Editing Markdown

3.4 Other commands
==================

Special characters may be inserted with
‘tlon-babel-md-insert-special-character’.  The list of characters
offered as completion candidates may be customized with the user option,
‘tlon-babel-md-special-characters’.


File: tlon-babel.info,  Node: local variables,  Prev: Editing Markdown,  Up: Top

4 local variables
*****************



Tag Table:
Node: Top241
Node: Main menu714
Node: GitHub and org-mode synchronization848
Node: Editing Markdown3753
Node: Commands to insert mathematical expressions4523
Node: Commands to insert citations5806
Node: Commands to insert note markers7023
Node: Other commands7244
Node: local variables7618

End Tag Table


Local Variables:
coding: utf-8
End:
