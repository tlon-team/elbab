\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename tlon-babel.info
@settitle tlon-babel
@documentencoding UTF-8
@documentlanguage en
@set MAINTAINERSITE @uref{https://github.com/tlon-team/tlon-babel,maintainer webpage}
@set MAINTAINER Pablo Stafforini
@set MAINTAINEREMAIL @email{pablo@tlon.team}
@set MAINTAINERCONTACT @uref{mailto:pablo@tlon.team,contact the maintainer}
@c %**end of header

@dircategory Emacs misc features
@direntry
* Tlon Babel: (tlon-babel). Companion Emacs package for the Tlön Babel projects.
@end direntry

@finalout
@titlepage
@author Pablo Stafforini (@email{pablo.stafforini@@gmail.com})
@end titlepage

@ifnottex
@node Top
@top tlon-babel

@insertcopying

@code{tlon-babel} is a repository of Emacs functions for the Tlön @code{babel} projects. @*
@end ifnottex

@menu
* test::
* @samp{forg} @samp{forge}-@samp{org-mode} synchronization::
* @samp{md} Markdown functionality::
@end menu

@node test
@chapter test

@node @samp{forg} @samp{forge}-@samp{org-mode} synchronization
@chapter @samp{forg}: @samp{forge}-@samp{org-mode} synchronization

@code{tlon-babel} includes several functions to synchronize the GitHub issues on a given repository with the corresponding @code{org-mode} TODOs in the user’s local file. The relevant GitHub sync functions are accessed from @code{tlon-babel-dispatch} (@code{H-r}), under the “sync” section (@code{y}): @*

@itemize
@item
``visit or capture'' (@code{tlon-babel-visit-counterpart-or-capture}, @code{H-r y y}): visits the “counterpart” (the associated @code{org-mode} TODO if point is on a GitHub issue, and vice versa) or, if point is on an issue that has not yet been captured, creates an associated @code{org-mode} TODO@. This command can also be invoked directly by pressing @code{,} with point on an issue or visiting an issue buffer. It may be regarded as a “dwim” (“do-what-I-mean”) command, in the sense that it is meant to guess the action that the user will normally want to perform in the relevant context. @*
@item
``visit'' (@code{tlon-babel-visit-counterpart}, @code{H-r y v}): visits the “counterpart”. If point is on an issue that has not yet been captured, no action will be taken. @*
@item
``post'' (@code{tlon-babel-create-issue-from-todo}, @code{H-r y p}): posts the @code{org-mode} TODO at point to GitHub, i.e. creates an associated GitHub issue. @*
@item
``capture'' (@code{tlon-babel-capture-issue}, @code{H-r y c}): captures the GitHub issue at point, i.e. creates an associated @code{org-mode} TODO@. @*
@item
``capture all'' (@code{tlon-babel-capture-all-issues}, @code{H-r y C}): like the above, but iterates over all GitHub issues in the repository. @*
@item
``reconcile'' (@code{tlon-babel-reconcile-issue-and-todo} , @code{H-r y r}): reconcile any differences between a GitHub issue and its associated @code{org-mode} TODO@. If differences are found, the user will be prompted to indicate whether they want to keep the GitHub issue and modify the @code{org-mode} TODO to match it (@code{i}), or vice versa (@code{t}). (Note: usually you want to keep the issue, so you will normally press @code{i} when prompted). @*
@item
``reconcile all'' (@code{tlon-babel-reconcile-all-issues-and-todos}, @code{H-r y R}): like the above, but iterates over all GitHub issues in the repository. Note that issues not yet captured will be ignored, so you may want to  capture all issues (@code{tlon-babel-capture-all-issues}) before reconciling them, if your goal is to ensure that the your @code{org-mode} TODOs are fully in sync with the GitHub issues. @*
@item
``close'' (@code{tlon-babel-close-issue-and-todo}, @code{H-r y x}): close the GitHub issue and mark its associated @code{org-mode} TODO as DONE@. @*
@end itemize

@node @samp{md} Markdown functionality
@chapter @samp{md}: Markdown functionality

@bye
